package lib.java.UI.presenter.starostiuk;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.toedter.calendar.JDateChooser;
import lib.java.Services.MasterService;
import lib.java.UI.presenter.table.models.ScienceJobTableModel;
import lib.java.model.ScienceTheme;
import lib.java.model.dto.ScientistJobDto;

import javax.swing.*;
import javax.swing.border.LineBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Date;
import java.util.Calendar;

public class EditScienceJobForm extends JFrame {
    private JPanel rootAddPanel;
    private JTextField nameField;
    private JTextField phoneField;
    private JTextField genderField;
    private JTextArea themeOfDiplomaArea;
    private JPanel startDatePanel;
    private JButton saveButton;
    private JButton cancelButton;
    private JPanel endDatePanel;
    private JTextField endReasonField;
    private JComboBox scienceThemeBox;
    private JComboBox chiefsBox;
    private JLabel alertText;
    private Calendar calendar = Calendar.getInstance();
    private JDateChooser startDate = new JDateChooser(calendar.getTime());
    private JDateChooser endDate = new JDateChooser();
    private MasterService masterService;
    private JTable rootTable;
    private ScientistJobDto scientistJobDto;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    public EditScienceJobForm(MasterService masterService, JTable rootTable, ScientistJobDto scientistJobDto) {
        this.rootTable = rootTable;
        this.masterService = masterService;
        this.scientistJobDto = scientistJobDto;
        setContentOfThemes();
        extractJobData();
        setContentPane(rootAddPanel);
        setVisible(true);
        setSize(500, 500);
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        alertText.setForeground(Color.red);

        // Date fields
        startDate.setDateFormatString("dd/MM/yyyy");
        endDate.setDateFormatString("dd/MM/yyyy");
        startDatePanel.add(startDate);
        endDatePanel.add(endDate);
        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
        saveButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ScientistJobDto jobEditDto = combineJobData();
                if (validateInput()) {
                    masterService.updateJobOfMaster(jobEditDto);
                    rootTable.setModel(new ScienceJobTableModel(masterService.getMasterJobs(scientistJobDto.getWorkerId())));
                    dispose();
                }
            }
        });
    }

    private ScientistJobDto combineJobData() {
        ScientistJobDto scientistJobDtoResponse = new ScientistJobDto();
        scientistJobDtoResponse.setName(nameField.getText());
        scientistJobDtoResponse.setStartDate(new Date(startDate.getDate().getTime()));
        if (endDate.getDate() != null) {
            scientistJobDtoResponse.setEndDate(new Date(endDate.getDate().getTime()));
        }
        scientistJobDtoResponse.setScienceTheme(new ScienceTheme(scienceThemeBox.getSelectedItem().toString()));
        scientistJobDtoResponse.setId(scientistJobDto.getId());
        scientistJobDtoResponse.setWorkerId(scientistJobDto.getWorkerId());
        return scientistJobDtoResponse;
    }

    private void extractJobData() {
        this.nameField.setText(scientistJobDto.getName());
        endDate.setDate(scientistJobDto.getEndDate());
        startDate.setDate(scientistJobDto.getStartDate());
        scienceThemeBox.setSelectedItem(scientistJobDto.getScienceTheme().getName());
    }

    private boolean validateInput() {
        boolean validator = true;
        if (this.nameField.getText().isEmpty()) {
            validator = false;
            nameField.setBorder(new LineBorder(Color.red, 1));
        }
        if (this.endDate.getDate() != null && startDate.getDate().after(endDate.getDate())) {
            validator = false;
            nameField.setBorder(new LineBorder(Color.red, 1));
        }
        if (!validator)
            alertText.setVisible(true);
        return validator;
    }

    private void setContentOfThemes() {
        // masterService.getScienceThemesValues().forEach(theme -> scienceThemeBox.addItem(theme));
        for (String s :
                masterService.getScienceThemesValues()) {
            scienceThemeBox.addItem(s);
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootAddPanel = new JPanel();
        rootAddPanel.setLayout(new GridLayoutManager(6, 2, new Insets(0, 0, 0, 0), -1, -1));
        startDatePanel = new JPanel();
        startDatePanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        rootAddPanel.add(startDatePanel, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Start  date*");
        startDatePanel.add(label1);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        rootAddPanel.add(panel1, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(40, -1), null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Name*");
        panel1.add(label2);
        nameField = new JTextField();
        nameField.setColumns(10);
        panel1.add(nameField);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        rootAddPanel.add(panel2, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        saveButton = new JButton();
        saveButton.setText("Save");
        panel2.add(saveButton);
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        panel2.add(cancelButton);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        rootAddPanel.add(panel3, new GridConstraints(5, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        alertText = new JLabel();
        alertText.setBackground(new Color(-6094845));
        alertText.setText("Please fill all mandatory attributes");
        alertText.setVisible(false);
        panel3.add(alertText);
        endDatePanel = new JPanel();
        endDatePanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        rootAddPanel.add(endDatePanel, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("End date");
        endDatePanel.add(label3);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        rootAddPanel.add(panel4, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Science theme*");
        panel4.add(label4);
        scienceThemeBox = new JComboBox();
        panel4.add(scienceThemeBox);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootAddPanel;
    }
}
